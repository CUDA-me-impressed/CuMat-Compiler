program ::= EOL? imports definitions EOF

imports ::= import*
import ::= "import" path EOL
path ::= (directorylist "/")? file
directorylist ::= (directory "/")*
directory ::= SLUG
file ::= SLUG

definitions ::= definition*
definition ::= (funcdef | typedef | assignment) EOL


funcdef ::= "func" signature EOL? block EOL
signature ::= typespec funcname ("(" arguments ")")?
arguments ::= (argument ("," argument)* )?
argument ::= typespec varname
typespec ::= typename (dimensionspec)?
dimensionspec ::= "[" dimension ("," dimension)* "]"
dimension ::= integer | "*"

block ::= "{" EOL (assignment EOL)* EOL? "}"
assignment ::= varname "=" expression

expression ::=

typedef ::= "type" typename "{" EOL? attrblock "}" EOL
attrblock ::= attr attr*
attr ::= attrname ":" typespec EOL

typename ::= identifier | primitive
varname ::= identifier
funcname ::= identifier
attrname ::= identifier

primitive ::= "int" | "bool" | "string" | "float" | functype
functype ::= "(" typespec ("," typespec)* ")" "->" typespec

// The list of characters considered line terminators in the unicode spec:
EOL ::= ("\r\n" | "\n" | "\r" | 'U+000B' | 'U+000C' | 'U+000D' | 'U+0085' | 'U+2028' | 'U+2029')+

// The list of characters considered whitespace but not line terminators.
// Also includes a few "non-whitespace" but still whitespace characters
SPACE ::= " " | "\t" | 'U+00A0' | 'U+1680' | 'U+2000' | 'U+2001' | 'U+2002' | 'U+2003' | 'U+2004' | 'U+2005' | 'U+2006' | 'U+2007' | 'U+2008' | 'U+2009' | 'U+200A' | 'U+202F' | 'U+205F' | 'U+3000' | 'U+180E' | 'U+200B' | 'U+2060' | 'U+FEFF'

SLUG ::= '[_a-zA-Z][_a-zA-Z0-9\-\.]*'


_ignore ::= SPACE
